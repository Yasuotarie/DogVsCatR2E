import { useState, useEffect } from "react";
const ethers = require("ethers");
import contractAbi from "./Traits.json";
import "./App.css";

function SvgDisplay({ svgData }) {
  const fallbackSvg = (
    <div style={{ width: "200px", height: "200px", border: "1px solid black" }}>
      Loading...
    </div>
  );

  return svgData ? (
    <div
      className="svg-container"
      dangerouslySetInnerHTML={{ __html: svgData }}
    ></div>
  ) : (
    fallbackSvg
  );
}

function App() {
  const [svgCode, setSvgCode] = useState("");

  const CONTRACT_ADDRESS = "0x0774Df3bAFB349AE0d3e429515DBB283C3c6F135";

  async function requestAccount() {
    if (!window.ethereum) throw Error("No crypto wallet found");
    await window.ethereum.request({ method: "eth_requestAccounts" });
  }

  async function getConnectedProvider() {
    const connectedProvider = new ethers.BrowserProvider(window.ethereum);
    await connectedProvider.ready; // Wait until the provider is ready
    return connectedProvider;
  }

  async function displaySvg() {
    try {
      await requestAccount();
      const provider = await getConnectedProvider();
      const contract = new ethers.Contract(
        CONTRACT_ADDRESS,
        contractAbi.abi,
        provider
      );
      const contractWithSigner = contract.connect(provider.getSigner());

      const tx = await contractWithSigner.drawSVG(1);
      await tx.wait();

      const ImageCreatedEvent = await contract.queryFilter(
        contract.filters.ImageCreated(),
        tx.blockNumber - 10,
        tx.blockNumber + 10
      );
      const firstEvent = ImageCreatedEvent[0];
      const decodedArg = ethers.utils._TypedDataEncoder.decode(
        ["bytes"],
        firstEvent.data
      )[0];
      const svgResult = Buffer.from(decodedArg.slice(2), "hex").toString();

      setSvgCode(svgResult);
    } catch (err) {
      alert(`Error : ${err.message}`);
    }
  }

  useEffect(() => {
    displaySvg();
  }, []);

  return (
    <div className="App">
      <header className="App-header">
        <h1>SVG Display Example</h1>
        <p>
          This example demonstrates how to fetch and display an SVG generated by
          an Ethereum smart contract.
        </p>
        <SvgDisplay svgData={svgCode} />
      </header>
    </div>
  );
}

export default App;
